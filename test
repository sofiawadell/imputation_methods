import numpy as np
import pandas as pd

from data_loader import data_loader_ohe_wo_target
from data_loader import data_loader_norm_factor_mice_imputed_data
from data_loader import data_loader_factor_wo_target

from factor_encode_to_ohe import factor_encode_to_ohe

from utils import normalize_numeric
from utils import renormalize_numeric
from utils import rmse_num_loss
from utils import rmse_cat_loss
from utils import m_rmse_loss
from utils import pfc

import time
from sklearn.impute import KNNImputer

##################### main
data_name = "news"
miss_rate = 0.1
best_k = 61
method = "knn"

##################### runImputation

# Load OHE data without target column
train_data_x, train_miss_data_x, test_data_x, test_miss_data_x = data_loader_ohe_wo_target(data_name, miss_rate) 

# Define mask matrix
mask_train = 1-np.isnan(train_miss_data_x)
mask_test = 1-np.isnan(test_miss_data_x) 

# Normalize the test data set using the norm_parameters from the training data with missingness
train_miss_norm_data_x, norm_params_train_miss_data = normalize_numeric(train_miss_data_x, data_name)
test_miss_norm_data_x, _ = normalize_numeric(test_miss_data_x, data_name, norm_params_train_miss_data)

# Transform to numpy arrays
train_miss_norm_data_x_np, test_miss_norm_data_x_np = train_miss_norm_data_x.values, test_miss_norm_data_x.values

##################### kNNImpute
start_time = time.time()

# Impute the missing values using kNNImputer with the best_k value
imputer = KNNImputer(n_neighbors=best_k)

# Fit a model using train data and impute train data 
train_imp_norm_data_x_np = imputer.fit_transform(train_miss_norm_data_x_np)

print("Training done")

# Impute test data set
test_imp_norm_data_x_np = imputer.transform(test_miss_norm_data_x_np)

# End timer
end_time = time.time()
elapsed_time = end_time - start_time
print(elapsed_time)

##################### runImputation
# Transform to pandas array to keep the column names 
train_imp_norm_data_x = pd.DataFrame(train_imp_norm_data_x_np, columns=train_miss_data_x.columns) 
test_imp_norm_data_x = pd.DataFrame(test_imp_norm_data_x_np, columns=test_miss_data_x.columns) 

# Renormalize data sets
train_imp_data_x = renormalize_numeric(train_imp_norm_data_x, norm_params_train_miss_data, data_name)
test_imp_data_x = renormalize_numeric(test_imp_norm_data_x, norm_params_train_miss_data, data_name)

##################### main
# Save renormalized imputed data 
missingness = int(miss_rate*100)

filename_train_imp= 'imputed_data/imputed_{}_train_data/imputed_{}_{}_train_{}.csv'.format(method, method, data_name, missingness)
train_imp_data_x.to_csv(filename_train_imp, index=False)

filename_test_imp = 'imputed_data/imputed_{}_test_data/imputed_{}_{}_test_{}.csv'.format(method, method, data_name, missingness)
test_imp_data_x.to_csv(filename_test_imp, index=False)

# Normalize the imputed data set using the full data set 
train_full_data_norm_x, norm_params_full_data_train = normalize_numeric(train_data_x, data_name)
test_full_data_norm_x, _ = normalize_numeric(test_data_x, data_name, norm_params_full_data_train)
test_imp_data_norm_x, _ = normalize_numeric(test_imp_data_x, data_name, norm_params_full_data_train)   

# Calculate RMSE for numerical data
rmse_num = rmse_num_loss(test_full_data_norm_x, test_imp_data_norm_x, mask_test, data_name)

# Calculate RMSE for numerical and categorical data 
rmse_cat = rmse_cat_loss(test_full_data_norm_x, test_imp_data_norm_x, mask_test, data_name)
m_rmse = m_rmse_loss(rmse_num, rmse_cat)

# Calculate PFC for categorical data 
pfc_value = pfc(test_full_data_norm_x, test_imp_data_norm_x, mask_test, data_name)

print(test_full_data_norm_x)
print(test_imp_data_norm_x)

print(f"Numerical RMSE: {rmse_num}")
print(f"Categorical RMSE: {rmse_cat}")
print(f"Modified RMSE: {m_rmse}")
print(f"PFC: {pfc_value}")

